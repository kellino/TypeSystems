
==================== FINAL INTERFACE ====================
2017-03-27 15:16:06.418793865 UTC

interface main@main:Processor 8002
  interface hash: 881ba0f8a4e28f4417c139d05965afdc
  ABI hash: 2a81a3085ccca5e81ffbd484249eb339
  export-list hash: ec68a343477e92aa07a7683c21f29411
  orphan hash: 9436f9f2b65bdebb53ee83ce848e250e
  flag hash: 919712b61ca3ebdfa1350799b1d512ca
  sig of: Nothing
  used TH splices: False
  where
exports:
  Processor.hoist
  Processor.hoistReplError
  Processor.processDynamic
  Processor.processStatic
  Processor.showOutput
  Processor.Repl
module dependencies: DynamicCheck Gamma Lattice Parser PrettyPrint
                     StaticCheck Syntax
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-18Iua6Y0oQZ5teqNh3j59Q
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-Gr2V5sUh0vxILqRALkIOq0
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.5.4@base-orphans-0.5.4-ABoxiBf7nXc7Qqh66CgYc9
                      bifunctors-5.4.1@bifunctors-5.4.1-G9sSLclb5k26O3Lio1becS
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-3taBO7oiJOm7HwkDYjek6x
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-LOqCz9UiRqn89oyERzBA9D
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      distributive-0.5.2@distributive-0.5.2-DzhYIvhMV8O6K3jnVc2kgn
                      exceptions-0.8.3@exceptions-0.8.3-Ggtjm8GpjAqJV0BBy1Ma2L
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.5.0@hashable-1.2.5.0-D487ltJkakbBMC5JTPGIXQ
                      haskeline-0.7.3.1@haskeline-0.7.3.1-19q6LHqZ5xHeU9qD4pnHO
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      megaparsec-5.2.0@megaparsec-5.2.0-5nYAxih7wLDlUbYD61o5M
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      profunctors-5.2@profunctors-5.2-LIxTI75q4uF48YzuBFpJUP
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      repline-0.1.6.0@repline-0.1.6.0-24ElRfM5DSl60yAuSTVxnN
                      scientific-0.3.4.10@scientific-0.3.4.10-23m8gsMho2XA7iQioaf2OE
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-DqTYAPqU3ao5zvndQftjsL
                      template-haskell-2.11.1.0 terminfo-0.4.0.2@terminfo-0.4.0.2
                      text-1.2.2.1@text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li
                      tf-random-0.5@tf-random-0.5-BGjMgO8m67W8CHiEl15kZ7
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-2tm9ddmq5Qk3kF2emBuYBK
                      unbound-generics-0.3.1@unbound-generics-0.3.1-BnZfdHaJ5Vovbu7cNDG2E
                      unix-2.7.2.1@unix-2.7.2.1
                      vector-0.11.0.0@vector-0.11.0.0-27QpYeEDQwsDlrhnt04T6e
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.5.0@hashable-1.2.5.0-D487ltJkakbBMC5JTPGIXQ:Data.Hashable.Generic
         main@main:Syntax
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li:Data.Text
         text-1.2.2.1@text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-27QpYeEDQwsDlrhnt04T6e:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-G9sSLclb5k26O3Lio1becS:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-G9sSLclb5k26O3Lio1becS:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-G9sSLclb5k26O3Lio1becS:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-G9sSLclb5k26O3Lio1becS:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-G9sSLclb5k26O3Lio1becS:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-G9sSLclb5k26O3Lio1becS:Data.Bifunctor.Tannen
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         main@main:Lattice main@main:Syntax
                         megaparsec-5.2.0@megaparsec-5.2.0-5nYAxih7wLDlUbYD61o5M:Text.Megaparsec.Error
                         megaparsec-5.2.0@megaparsec-5.2.0-5nYAxih7wLDlUbYD61o5M:Text.Megaparsec.Pos
                         megaparsec-5.2.0@megaparsec-5.2.0-5nYAxih7wLDlUbYD61o5M:Text.Megaparsec.Prim
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         tagged-0.8.5@tagged-0.8.5-DqTYAPqU3ao5zvndQftjsL:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li:Data.Text
                         text-1.2.2.1@text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li:Data.Text.Lazy
                         unbound-generics-0.3.1@unbound-generics-0.3.1-BnZfdHaJ5Vovbu7cNDG2E:Unbound.Generics.LocallyNameless.Bind
                         unbound-generics-0.3.1@unbound-generics-0.3.1-BnZfdHaJ5Vovbu7cNDG2E:Unbound.Generics.LocallyNameless.Embed
                         unbound-generics-0.3.1@unbound-generics-0.3.1-BnZfdHaJ5Vovbu7cNDG2E:Unbound.Generics.LocallyNameless.Name
                         unbound-generics-0.3.1@unbound-generics-0.3.1-BnZfdHaJ5Vovbu7cNDG2E:Unbound.Generics.LocallyNameless.Rebind
                         unbound-generics-0.3.1@unbound-generics-0.3.1-BnZfdHaJ5Vovbu7cNDG2E:Unbound.Generics.LocallyNameless.Rec
                         unbound-generics-0.3.1@unbound-generics-0.3.1-BnZfdHaJ5Vovbu7cNDG2E:Unbound.Generics.LocallyNameless.Shift
                         vector-0.11.0.0@vector-0.11.0.0-27QpYeEDQwsDlrhnt04T6e:Data.Vector
import  -/  ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-Gr2V5sUh0vxILqRALkIOq0:Text.PrettyPrint.ANSI.Leijen 0b0029118a73d460584eaa06296bf541
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Exception e38fa3e73d54022fb9e3ce06477dfd07
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base a29df8c78ba14cbcd4d90f97bd8d22e9
import  -/  exceptions-0.8.3@exceptions-0.8.3-Ggtjm8GpjAqJV0BBy1Ma2L:Control.Monad.Catch 74b289809c367e6693c609c4b43e5e82
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  DynamicCheck 4b0464c7f79dbeaaa92516d3cbd54b16
  exports: 343394781e8f8309ce10009b1520acf4
  evalDef 51655b2a9b164701ef778c4f66fe2078
  runDynamic 9ff4138e5a81e44d6b3c1356e2e7f839
import  -/  Gamma 4aeb18cf8fa74d68a048d0751b385c8b
  exports: 3977cd7b93c438541904e8bef23fa46c
import  -/  Parser 9cdadedbff68b303cd81f0da6d020a2a
  exports: 483438ccda3f2e12fd27e8a6aee94b42
  parseProgram dcaf9d671fd357c89abeadcd9dfdb3f3
import  -/  PrettyPrint 0d75d825d79f099e47368c96de95ffb9
  exports: ccf1c4736ffb4ad151039754c544a614
  Display b362d6901e5605e86fec3220c0df047c
  display 991a94a356a59269559095f141ef7ca3
  ppstatic b645d0e6dabcd06acc94d644ed09af57
import  -/  StaticCheck 76ee07f7ee9c5e7c47f4f2c01d7d7993
  exports: 48acd9757feac4c8aa023e053977c156
  runOverFile 1ea98f83fd51b2a91d65ce2270b737e6
import  -/  Syntax 6c120300cbc8be0c354432ee47bcf2aa
  exports: 095bc84ec11cd23a65bba080dc14ddf8
  Ctx 043451a54ebe0fa8e1aabda3008751fa
  Gamma b049cc93227a1c99c7e5e3557f91a45a
  gamma 8ae791ea92a1337073c6a69aa8e4787c
  termenv dad23e518f6f0409de68c7062ae43470
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Strict eff0af50b9ed40c32939885d02cca72b
import  -/  repline-0.1.6.0@repline-0.1.6.0-24ElRfM5DSl60yAuSTVxnN:System.Console.Repline 36079a688602236b8b0cce2e884339a9
import  -/  text-1.2.2.1@text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li:Data.Text 9ee336888c840d0d73391a6640977abb
import  -/  text-1.2.2.1@text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li:Data.Text.Internal 6acc141272dbd4d1882cabf005fba52c
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Strict 978f397cc30fa26d55cf117e3751a6ed
b6651da2fad2c7533b1b854c0fcf1901
  $s$fExceptionParseError ::
    GHC.Exception.Exception
      (Text.Megaparsec.Error.ParseError
         GHC.Types.Char Text.Megaparsec.Error.Dec)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ParseError
                       GHC.Types.Char Text.Megaparsec.Error.Dec)
                  (Text.Megaparsec.Error.$fExceptionParseError_$cp1Exception
                     @ GHC.Types.Char
                     @ Text.Megaparsec.Error.Dec
                     GHC.Show.$fShowChar
                     Processor.$s$fExceptionParseError4
                       `cast`
                     (Sym (Data.Typeable.Internal.N:Typeable[0]
                               <*>_N <GHC.Types.Char>_N))
                     GHC.Classes.$fOrdChar
                     Text.Megaparsec.Error.$fShowTokenChar_$cshowTokens
                       `cast`
                     (Sym (Text.Megaparsec.Error.N:ShowToken[0] <GHC.Types.Char>_N))
                     Text.Megaparsec.Error.$fShowDec
                     Processor.$s$fExceptionParseError1
                       `cast`
                     (Sym (Data.Typeable.Internal.N:Typeable[0]
                               <*>_N <Text.Megaparsec.Error.Dec>_N))
                     Text.Megaparsec.Error.$fShowErrorComponentDec)
                  Processor.$s$fExceptionParseError_$s$fExceptionParseError_$cp2Exception
                  (Text.Megaparsec.Error.$fExceptionParseError_$ctoException
                     @ GHC.Types.Char
                     @ Text.Megaparsec.Error.Dec
                     GHC.Show.$fShowChar
                     Processor.$s$fExceptionParseError4
                       `cast`
                     (Sym (Data.Typeable.Internal.N:Typeable[0]
                               <*>_N <GHC.Types.Char>_N))
                     GHC.Classes.$fOrdChar
                     Text.Megaparsec.Error.$fShowTokenChar_$cshowTokens
                       `cast`
                     (Sym (Text.Megaparsec.Error.N:ShowToken[0] <GHC.Types.Char>_N))
                     Text.Megaparsec.Error.$fShowDec
                     Processor.$s$fExceptionParseError1
                       `cast`
                     (Sym (Data.Typeable.Internal.N:Typeable[0]
                               <*>_N <Text.Megaparsec.Error.Dec>_N))
                     Text.Megaparsec.Error.$fShowErrorComponentDec)
                  (Text.Megaparsec.Error.$fExceptionParseError_$cfromException
                     @ GHC.Types.Char
                     @ Text.Megaparsec.Error.Dec
                     GHC.Show.$fShowChar
                     Processor.$s$fExceptionParseError4
                       `cast`
                     (Sym (Data.Typeable.Internal.N:Typeable[0]
                               <*>_N <GHC.Types.Char>_N))
                     GHC.Classes.$fOrdChar
                     Text.Megaparsec.Error.$fShowTokenChar_$cshowTokens
                       `cast`
                     (Sym (Text.Megaparsec.Error.N:ShowToken[0] <GHC.Types.Char>_N))
                     Text.Megaparsec.Error.$fShowDec
                     Processor.$s$fExceptionParseError1
                       `cast`
                     (Sym (Data.Typeable.Internal.N:Typeable[0]
                               <*>_N <Text.Megaparsec.Error.Dec>_N))
                     Text.Megaparsec.Error.$fShowErrorComponentDec)
                  Processor.$s$fExceptionParseError_$s$fExceptionParseError_$cdisplayException -}
0e7f7f50b8eb5f775a04f9d534bc66b4
  $s$fExceptionParseError1 ::
    GHC.Prim.Proxy# Text.Megaparsec.Error.Dec
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Text.Megaparsec.Error.Dec) ->
                 Processor.$s$fExceptionParseError2) -}
27f31017b86e41f19b2b055d428237a5
  $s$fExceptionParseError2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Processor.$s$fExceptionParseError3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Text.Megaparsec.Error.$tcDec
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
59e093bcb017e8e7a3e53c258b6d600b
  $s$fExceptionParseError3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   7669574675464010422##
                   10380704377304775480##) -}
192c5774d5c92e324dd1321ed9c7b821
  $s$fExceptionParseError4 ::
    GHC.Prim.Proxy# GHC.Types.Char -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Types.Char) ->
                 Processor.$s$fExceptionParseError5) -}
58ff2e761751510dc7cbab8b44f6750d
  $s$fExceptionParseError5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Processor.$s$fExceptionParseError6
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
cad74f07358e37f2d097c30309ebe9c3
  $s$fExceptionParseError6 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
aa76630ae6905f4b9fe74963abd8bcac
  $s$fExceptionParseError_$s$fExceptionParseError_$cdisplayException ::
    Text.Megaparsec.Error.ParseError
      GHC.Types.Char Text.Megaparsec.Error.Dec
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S(LS)LLL),1*U(1*U(U(U,U,U),U),U,U,U)>,
     Unfolding: InlineRule (0, True, False)
                (\ (eta :: Text.Megaparsec.Error.ParseError
                             GHC.Types.Char Text.Megaparsec.Error.Dec) ->
                 Text.Megaparsec.Error.parseErrorPretty
                   @ GHC.Types.Char
                   @ Text.Megaparsec.Error.Dec
                   GHC.Classes.$fOrdChar
                   Text.Megaparsec.Error.$fShowTokenChar_$cshowTokens
                     `cast`
                   (Sym (Text.Megaparsec.Error.N:ShowToken[0] <GHC.Types.Char>_N))
                   Text.Megaparsec.Error.$fShowErrorComponentDec
                   eta) -}
b0a9b812b164e4b88c25ec47d7c262eb
  $s$fExceptionParseError_$s$fExceptionParseError_$cp2Exception ::
    GHC.Show.Show
      (Text.Megaparsec.Error.ParseError
         GHC.Types.Char Text.Megaparsec.Error.Dec)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Processor.$s$fExceptionParseError_$s$fShowParseError -}
c6b9b37abb0427c9c201d82fd00ceaf3
  $s$fExceptionParseError_$s$fShowParseError ::
    GHC.Show.Show
      (Text.Megaparsec.Error.ParseError
         GHC.Types.Char Text.Megaparsec.Error.Dec)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ParseError
                       GHC.Types.Char Text.Megaparsec.Error.Dec)
                  (Text.Megaparsec.Error.$fShowParseError_$cshowsPrec
                     @ GHC.Types.Char
                     @ Text.Megaparsec.Error.Dec
                     Text.Megaparsec.Error.$fShowDec
                     GHC.Show.$fShowChar)
                  Processor.$s$fExceptionParseError_$s$fShowParseError_$cshow
                  Processor.$s$fExceptionParseError_$s$fShowParseError_$cshowList -}
49b0d5108c942237692b4e5c4a16ada7
  $s$fExceptionParseError_$s$fShowParseError_$cshow ::
    Text.Megaparsec.Error.ParseError
      GHC.Types.Char Text.Megaparsec.Error.Dec
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Text.Megaparsec.Error.ParseError
                           GHC.Types.Char Text.Megaparsec.Error.Dec) ->
                 Text.Megaparsec.Error.$fShowParseError_$cshowsPrec
                   @ GHC.Types.Char
                   @ Text.Megaparsec.Error.Dec
                   Text.Megaparsec.Error.$fShowDec
                   GHC.Show.$fShowChar
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5770a12d2670052e8c3cb1c6339b0871
  $s$fExceptionParseError_$s$fShowParseError_$cshowList ::
    [Text.Megaparsec.Error.ParseError
       GHC.Types.Char Text.Megaparsec.Error.Dec]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: InlineRule (0, True, False)
                (GHC.Show.showList__
                   @ (Text.Megaparsec.Error.ParseError
                        GHC.Types.Char Text.Megaparsec.Error.Dec)
                   (Text.Megaparsec.Error.$fShowParseError_$cshowsPrec
                      @ GHC.Types.Char
                      @ Text.Megaparsec.Error.Dec
                      Text.Megaparsec.Error.$fShowDec
                      GHC.Show.$fShowChar
                      Text.Megaparsec.Error.$fDataErrorItem3)) -}
5b88e23e2f566ccd043a3d8d8bf9414a
  $slookup1 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map [GHC.Types.Char] a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
e0ea930353f79f54d24f31b33e6af728
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Processor.$trModule2
                   Processor.$trModule1) -}
09ed0b9d1b9c09a58dde1684ffdd5651
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Processor"#) -}
ed1d42d0d230ecc2419a6286418efc89
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
ff3f55c0f46c1883cb04ebd5d6b52209
  $wshowOutput :: Syntax.TermEnv -> Processor.Repl ()
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Syntax.TermEnv) ->
                 case Processor.$slookup1
                        @ Syntax.Term
                        Processor.showOutput2
                        ww of wild {
                   GHC.Base.Nothing
                   -> Processor.showOutput1
                        `cast`
                      (Trans
                           (<System.Console.Haskeline.Term.RunTerm>_R
                            ->_R Trans
                                     (<GHC.IORef.IORef System.Console.Haskeline.History.History>_R
                                      ->_R Trans
                                               (<GHC.IORef.IORef
                                                   System.Console.Haskeline.Command.KillRing.KillRing>_R
                                                ->_R Trans
                                                         (<System.Console.Haskeline.Prefs.Prefs>_R
                                                          ->_R Trans
                                                                   (<System.Console.Haskeline.InputT.Settings
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Syntax.Ctx
                                                                          GHC.Types.IO)>_R
                                                                    ->_R Trans
                                                                             (<Syntax.Ctx>_R
                                                                              ->_R Sym (GHC.Types.N:IO[0]
                                                                                            <((),
                                                                                              Syntax.Ctx)>_R))
                                                                             (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                       <Syntax.Ctx>_N
                                                                                       <GHC.Types.IO>_R
                                                                                       <()>_N)))
                                                                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                             <*>_N
                                                                             <System.Console.Haskeline.InputT.Settings
                                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                                   Syntax.Ctx
                                                                                   GHC.Types.IO)>_R
                                                                             <Control.Monad.Trans.State.Strict.StateT
                                                                                Syntax.Ctx
                                                                                GHC.Types.IO>_R
                                                                             <()>_N)))
                                                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                   <*>_N
                                                                   <System.Console.Haskeline.Prefs.Prefs>_R
                                                                   <Control.Monad.Trans.Reader.ReaderT
                                                                      (System.Console.Haskeline.InputT.Settings
                                                                         (Control.Monad.Trans.State.Strict.StateT
                                                                            Syntax.Ctx
                                                                            GHC.Types.IO))
                                                                      (Control.Monad.Trans.State.Strict.StateT
                                                                         Syntax.Ctx GHC.Types.IO)>_R
                                                                   <()>_N)))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <GHC.IORef.IORef
                                                            System.Console.Haskeline.Command.KillRing.KillRing>_R
                                                         <Control.Monad.Trans.Reader.ReaderT
                                                            System.Console.Haskeline.Prefs.Prefs
                                                            (Control.Monad.Trans.Reader.ReaderT
                                                               (System.Console.Haskeline.InputT.Settings
                                                                  (Control.Monad.Trans.State.Strict.StateT
                                                                     Syntax.Ctx GHC.Types.IO))
                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                  Syntax.Ctx GHC.Types.IO))>_R
                                                         <()>_N)))
                                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                               <*>_N
                                               <GHC.IORef.IORef
                                                  System.Console.Haskeline.History.History>_R
                                               <Control.Monad.Trans.Reader.ReaderT
                                                  (GHC.IORef.IORef
                                                     System.Console.Haskeline.Command.KillRing.KillRing)
                                                  (Control.Monad.Trans.Reader.ReaderT
                                                     System.Console.Haskeline.Prefs.Prefs
                                                     (Control.Monad.Trans.Reader.ReaderT
                                                        (System.Console.Haskeline.InputT.Settings
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Syntax.Ctx GHC.Types.IO))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Syntax.Ctx GHC.Types.IO)))>_R
                                               <()>_N)))
                           (Trans
                                (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                          <*>_N
                                          <System.Console.Haskeline.Term.RunTerm>_R
                                          <Control.Monad.Trans.Reader.ReaderT
                                             (GHC.IORef.IORef
                                                System.Console.Haskeline.History.History)
                                             (Control.Monad.Trans.Reader.ReaderT
                                                (GHC.IORef.IORef
                                                   System.Console.Haskeline.Command.KillRing.KillRing)
                                                (Control.Monad.Trans.Reader.ReaderT
                                                   System.Console.Haskeline.Prefs.Prefs
                                                   (Control.Monad.Trans.Reader.ReaderT
                                                      (System.Console.Haskeline.InputT.Settings
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Syntax.Ctx GHC.Types.IO))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Syntax.Ctx GHC.Types.IO))))>_R
                                          <()>_N))
                                (Trans
                                     (Sym (System.Console.Haskeline.InputT.N:InputT[0]
                                               <Control.Monad.Trans.State.Strict.StateT
                                                  Syntax.Ctx GHC.Types.IO>_R))
                                     (Sym (System.Console.Repline.N:HaskelineT[0]) <Control.Monad.Trans.State.Strict.StateT
                                                                                      Syntax.Ctx
                                                                                      GHC.Types.IO>_N) <()>_N)))
                   GHC.Base.Just res
                   -> let {
                        lvl14 :: Text.PrettyPrint.ANSI.Leijen.SimpleDoc
                        = Text.PrettyPrint.ANSI.Leijen.renderFits
                            Text.PrettyPrint.ANSI.Leijen.fits1
                            Text.PrettyPrint.ANSI.Leijen.$fShowDoc3
                            Text.PrettyPrint.ANSI.Leijen.$fShowDoc2
                            (Text.PrettyPrint.ANSI.Leijen.Cat
                               (PrettyPrint.$fDisplayTerm_$cdisplay res)
                               Text.PrettyPrint.ANSI.Leijen.Line)
                      } in
                      (\ (eta :: System.Console.Haskeline.Term.RunTerm)
                         (eta1 :: GHC.IORef.IORef System.Console.Haskeline.History.History)
                         (eta2 :: GHC.IORef.IORef
                                    System.Console.Haskeline.Command.KillRing.KillRing)
                         (eta3 :: System.Console.Haskeline.Prefs.Prefs)
                         (eta4 :: System.Console.Haskeline.InputT.Settings
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Syntax.Ctx GHC.Types.IO))
                         (eta5 :: Syntax.Ctx)
                         (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case Text.PrettyPrint.ANSI.Leijen.displayIO1
                              GHC.IO.Handle.FD.stdout
                              lvl14
                              eta6 of ds1 { (#,#) ipv ipv1 ->
                       (# ipv, (ipv1, eta5) #) })
                        `cast`
                      (Trans
                           (<System.Console.Haskeline.Term.RunTerm>_R
                            ->_R Trans
                                     (<GHC.IORef.IORef System.Console.Haskeline.History.History>_R
                                      ->_R Trans
                                               (<GHC.IORef.IORef
                                                   System.Console.Haskeline.Command.KillRing.KillRing>_R
                                                ->_R Trans
                                                         (<System.Console.Haskeline.Prefs.Prefs>_R
                                                          ->_R Trans
                                                                   (<System.Console.Haskeline.InputT.Settings
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Syntax.Ctx
                                                                          GHC.Types.IO)>_R
                                                                    ->_R Trans
                                                                             (<Syntax.Ctx>_R
                                                                              ->_R Sym (GHC.Types.N:IO[0]
                                                                                            <((),
                                                                                              Syntax.Ctx)>_R))
                                                                             (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                       <Syntax.Ctx>_N
                                                                                       <GHC.Types.IO>_R
                                                                                       <()>_N)))
                                                                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                             <*>_N
                                                                             <System.Console.Haskeline.InputT.Settings
                                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                                   Syntax.Ctx
                                                                                   GHC.Types.IO)>_R
                                                                             <Control.Monad.Trans.State.Strict.StateT
                                                                                Syntax.Ctx
                                                                                GHC.Types.IO>_R
                                                                             <()>_N)))
                                                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                   <*>_N
                                                                   <System.Console.Haskeline.Prefs.Prefs>_R
                                                                   <Control.Monad.Trans.Reader.ReaderT
                                                                      (System.Console.Haskeline.InputT.Settings
                                                                         (Control.Monad.Trans.State.Strict.StateT
                                                                            Syntax.Ctx
                                                                            GHC.Types.IO))
                                                                      (Control.Monad.Trans.State.Strict.StateT
                                                                         Syntax.Ctx GHC.Types.IO)>_R
                                                                   <()>_N)))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <GHC.IORef.IORef
                                                            System.Console.Haskeline.Command.KillRing.KillRing>_R
                                                         <Control.Monad.Trans.Reader.ReaderT
                                                            System.Console.Haskeline.Prefs.Prefs
                                                            (Control.Monad.Trans.Reader.ReaderT
                                                               (System.Console.Haskeline.InputT.Settings
                                                                  (Control.Monad.Trans.State.Strict.StateT
                                                                     Syntax.Ctx GHC.Types.IO))
                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                  Syntax.Ctx GHC.Types.IO))>_R
                                                         <()>_N)))
                                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                               <*>_N
                                               <GHC.IORef.IORef
                                                  System.Console.Haskeline.History.History>_R
                                               <Control.Monad.Trans.Reader.ReaderT
                                                  (GHC.IORef.IORef
                                                     System.Console.Haskeline.Command.KillRing.KillRing)
                                                  (Control.Monad.Trans.Reader.ReaderT
                                                     System.Console.Haskeline.Prefs.Prefs
                                                     (Control.Monad.Trans.Reader.ReaderT
                                                        (System.Console.Haskeline.InputT.Settings
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Syntax.Ctx GHC.Types.IO))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Syntax.Ctx GHC.Types.IO)))>_R
                                               <()>_N)))
                           (Trans
                                (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                          <*>_N
                                          <System.Console.Haskeline.Term.RunTerm>_R
                                          <Control.Monad.Trans.Reader.ReaderT
                                             (GHC.IORef.IORef
                                                System.Console.Haskeline.History.History)
                                             (Control.Monad.Trans.Reader.ReaderT
                                                (GHC.IORef.IORef
                                                   System.Console.Haskeline.Command.KillRing.KillRing)
                                                (Control.Monad.Trans.Reader.ReaderT
                                                   System.Console.Haskeline.Prefs.Prefs
                                                   (Control.Monad.Trans.Reader.ReaderT
                                                      (System.Console.Haskeline.InputT.Settings
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Syntax.Ctx GHC.Types.IO))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Syntax.Ctx GHC.Types.IO))))>_R
                                          <()>_N))
                                (Trans
                                     (Sym (System.Console.Haskeline.InputT.N:InputT[0]
                                               <Control.Monad.Trans.State.Strict.StateT
                                                  Syntax.Ctx GHC.Types.IO>_R))
                                     (Sym (System.Console.Repline.N:HaskelineT[0]) <Control.Monad.Trans.State.Strict.StateT
                                                                                      Syntax.Ctx
                                                                                      GHC.Types.IO>_N) <()>_N))) }) -}
dceb552ecc0f61021e74f68e271d9524
  type Repl a =
    System.Console.Repline.HaskelineT
      (Control.Monad.Trans.State.Strict.StateT Syntax.Ctx GHC.Types.IO) a
af0b11170628a1ad4a16db65ca9e67c7
  hoist ::
    (GHC.Base.Monad m, Control.Monad.Catch.MonadThrow m,
     GHC.Show.Show e, GHC.Exception.Exception e) =>
    Data.Either.Either e a -> m a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S,1*U(1*U(A,A,A,1*C1(U),A),1*C1(C1(U)))><L,A><L,U><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ (m :: * -> *)
                   @ e
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dShow :: GHC.Show.Show e)
                   ($dException :: GHC.Exception.Exception e)
                   (eta :: Data.Either.Either e a) ->
                 case eta of wild {
                   Data.Either.Left err
                   -> Control.Monad.Catch.throwM
                        @ m
                        $dMonadThrow
                        @ e
                        @ a
                        $dException
                        err
                   Data.Either.Right v
                   -> GHC.Base.return
                        @ m
                        (Control.Monad.Catch.$p1MonadThrow @ m $dMonadThrow)
                        @ a
                        v }) -}
8f74034bee06f2e0b264f1128b02eeae
  hoistReplError ::
    PrettyPrint.Display e => Data.Either.Either e a -> Processor.Repl a
  {- Arity: 9,
     Strictness: <L,1*C1(U)><S,1*U><L,A><L,A><L,A><L,A><L,A><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Processor.hoistReplError3
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <PrettyPrint.Display e>_R
                 ->_R <Data.Either.Either e a>_R
                 ->_R Trans
                          (<System.Console.Haskeline.Term.RunTerm>_R
                           ->_R Trans
                                    (<GHC.IORef.IORef System.Console.Haskeline.History.History>_R
                                     ->_R Trans
                                              (<GHC.IORef.IORef
                                                  System.Console.Haskeline.Command.KillRing.KillRing>_R
                                               ->_R Trans
                                                        (<System.Console.Haskeline.Prefs.Prefs>_R
                                                         ->_R Trans
                                                                  (<System.Console.Haskeline.InputT.Settings
                                                                      (Control.Monad.Trans.State.Strict.StateT
                                                                         Syntax.Ctx GHC.Types.IO)>_R
                                                                   ->_R Trans
                                                                            (<Syntax.Ctx>_R
                                                                             ->_R Sym (GHC.Types.N:IO[0]
                                                                                           <(a,
                                                                                             Syntax.Ctx)>_R))
                                                                            (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                      <Syntax.Ctx>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <a>_N)))
                                                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                            <*>_N
                                                                            <System.Console.Haskeline.InputT.Settings
                                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                                  Syntax.Ctx
                                                                                  GHC.Types.IO)>_R
                                                                            <Control.Monad.Trans.State.Strict.StateT
                                                                               Syntax.Ctx
                                                                               GHC.Types.IO>_R
                                                                            <a>_N)))
                                                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                  <*>_N
                                                                  <System.Console.Haskeline.Prefs.Prefs>_R
                                                                  <Control.Monad.Trans.Reader.ReaderT
                                                                     (System.Console.Haskeline.InputT.Settings
                                                                        (Control.Monad.Trans.State.Strict.StateT
                                                                           Syntax.Ctx GHC.Types.IO))
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Syntax.Ctx GHC.Types.IO)>_R
                                                                  <a>_N)))
                                              (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N
                                                        <GHC.IORef.IORef
                                                           System.Console.Haskeline.Command.KillRing.KillRing>_R
                                                        <Control.Monad.Trans.Reader.ReaderT
                                                           System.Console.Haskeline.Prefs.Prefs
                                                           (Control.Monad.Trans.Reader.ReaderT
                                                              (System.Console.Haskeline.InputT.Settings
                                                                 (Control.Monad.Trans.State.Strict.StateT
                                                                    Syntax.Ctx GHC.Types.IO))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Syntax.Ctx GHC.Types.IO))>_R
                                                        <a>_N)))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <GHC.IORef.IORef
                                                 System.Console.Haskeline.History.History>_R
                                              <Control.Monad.Trans.Reader.ReaderT
                                                 (GHC.IORef.IORef
                                                    System.Console.Haskeline.Command.KillRing.KillRing)
                                                 (Control.Monad.Trans.Reader.ReaderT
                                                    System.Console.Haskeline.Prefs.Prefs
                                                    (Control.Monad.Trans.Reader.ReaderT
                                                       (System.Console.Haskeline.InputT.Settings
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Syntax.Ctx GHC.Types.IO))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Syntax.Ctx GHC.Types.IO)))>_R
                                              <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <System.Console.Haskeline.Term.RunTerm>_R
                                         <Control.Monad.Trans.Reader.ReaderT
                                            (GHC.IORef.IORef
                                               System.Console.Haskeline.History.History)
                                            (Control.Monad.Trans.Reader.ReaderT
                                               (GHC.IORef.IORef
                                                  System.Console.Haskeline.Command.KillRing.KillRing)
                                               (Control.Monad.Trans.Reader.ReaderT
                                                  System.Console.Haskeline.Prefs.Prefs
                                                  (Control.Monad.Trans.Reader.ReaderT
                                                     (System.Console.Haskeline.InputT.Settings
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Syntax.Ctx GHC.Types.IO))
                                                     (Control.Monad.Trans.State.Strict.StateT
                                                        Syntax.Ctx GHC.Types.IO))))>_R
                                         <a>_N))
                               (Trans
                                    (Sym (System.Console.Haskeline.InputT.N:InputT[0]
                                              <Control.Monad.Trans.State.Strict.StateT
                                                 Syntax.Ctx GHC.Types.IO>_R))
                                    (Sym (System.Console.Repline.N:HaskelineT[0]) <Control.Monad.Trans.State.Strict.StateT
                                                                                     Syntax.Ctx
                                                                                     GHC.Types.IO>_N) <a>_N))) -}
ae830ebb9c0b929f11d0baf426a98143
  hoistReplError3 ::
    PrettyPrint.Display e =>
    Data.Either.Either e a
    -> System.Console.Haskeline.Term.RunTerm
    -> GHC.IORef.IORef System.Console.Haskeline.History.History
    -> GHC.IORef.IORef
         System.Console.Haskeline.Command.KillRing.KillRing
    -> System.Console.Haskeline.Prefs.Prefs
    -> System.Console.Haskeline.InputT.Settings
         (Control.Monad.Trans.State.Strict.StateT Syntax.Ctx GHC.Types.IO)
    -> Syntax.Ctx
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (a, Syntax.Ctx) #)
  {- Arity: 9,
     Strictness: <L,1*C1(U)><S,1*U><L,A><L,A><L,A><L,A><L,A><L,U><S,U>,
     Unfolding: InlineRule (9, True, False)
                (\ @ e
                   @ a
                   ($dDisplay :: PrettyPrint.Display e)
                   (ds :: Data.Either.Either e a)
                   (eta :: System.Console.Haskeline.Term.RunTerm)
                   (eta1 :: GHC.IORef.IORef System.Console.Haskeline.History.History)
                   (eta2 :: GHC.IORef.IORef
                              System.Console.Haskeline.Command.KillRing.KillRing)
                   (eta3 :: System.Console.Haskeline.Prefs.Prefs)
                   (eta4 :: System.Console.Haskeline.InputT.Settings
                              (Control.Monad.Trans.State.Strict.StateT Syntax.Ctx GHC.Types.IO))
                   (eta5 :: Syntax.Ctx)
                   (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild {
                   Data.Either.Left err
                   -> case Text.PrettyPrint.ANSI.Leijen.displayIO1
                             GHC.IO.Handle.FD.stdout
                             (Text.PrettyPrint.ANSI.Leijen.renderFits
                                Text.PrettyPrint.ANSI.Leijen.fits1
                                Text.PrettyPrint.ANSI.Leijen.$fShowDoc3
                                Text.PrettyPrint.ANSI.Leijen.$fShowDoc2
                                ($dDisplay `cast` (PrettyPrint.N:Display[0] <e>_N) err))
                             eta6 of ds1 { (#,#) ipv ipv1 ->
                      case System.Console.Repline.abort1 @ a ipv
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, (a, Syntax.Ctx) #)
                      of {} }
                   Data.Either.Right v -> (# eta6, (v, eta5) #) }) -}
9c811a34756c5d1926c558ef71a2bbc8
  processDynamic :: Data.Text.Internal.Text -> Processor.Repl ()
  {- Arity: 1, Strictness: <L,U> -}
f3b730545546ce888f4d340fdbcce68d
  processStatic ::
    (GHC.Base.Monad m, Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Catch.MonadThrow m,
     Control.Monad.State.Class.MonadState Syntax.Ctx m) =>
    Data.Text.Internal.Text -> GHC.Types.Bool -> m ()
  {- Arity: 6,
     Strictness: <L,1*U(1*U,A,A,A,A)><S(SL),U(1*U,1*U)><L,U(U(A,A,A,C(U),A),C(C1(U)))><L,U(A,1*U,C(U),A)><L,U><L,U> -}
b3f84b7452b635c8f68a7fae4e26d6ea
  showOutput :: GHC.Base.String -> Syntax.Ctx -> Processor.Repl ()
  {- Arity: 2, Strictness: <L,A><S(SL),1*U(1*U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String) (w1 :: Syntax.Ctx) ->
                 case w1 of ww { Syntax.Ctx ww1 ww2 ->
                 Processor.$wshowOutput ww1 }) -}
0eed869137546f4d4228b723fb34a2f2
  showOutput1 ::
    System.Console.Haskeline.Term.RunTerm
    -> GHC.IORef.IORef System.Console.Haskeline.History.History
    -> GHC.IORef.IORef
         System.Console.Haskeline.Command.KillRing.KillRing
    -> System.Console.Haskeline.Prefs.Prefs
    -> System.Console.Haskeline.InputT.Settings
         (Control.Monad.Trans.State.Strict.StateT Syntax.Ctx GHC.Types.IO)
    -> Syntax.Ctx
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), Syntax.Ctx) #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,A><L,A><L,U><S,U>,
     Unfolding: InlineRule (7, True, False)
                (\ (eta1 :: System.Console.Haskeline.Term.RunTerm)
                   (eta2 :: GHC.IORef.IORef System.Console.Haskeline.History.History)
                   (eta3 :: GHC.IORef.IORef
                              System.Console.Haskeline.Command.KillRing.KillRing)
                   (eta4 :: System.Console.Haskeline.Prefs.Prefs)
                   (eta5 :: System.Console.Haskeline.InputT.Settings
                              (Control.Monad.Trans.State.Strict.StateT Syntax.Ctx GHC.Types.IO))
                   (eta :: Syntax.Ctx)
                   (eta7 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta7, (GHC.Tuple.(), eta) #)) -}
16d6ed4b59450737630bce07f40c7f22
  showOutput2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "it"#) -}
"SPEC/Processor $fExceptionParseError @ Char @ Dec" [ALWAYS] forall ($dShowErrorComponent :: Text.Megaparsec.Error.ShowErrorComponent
                                                                                               Text.Megaparsec.Error.Dec)
                                                                    ($dTypeable1 :: Data.Typeable.Internal.Typeable
                                                                                      Text.Megaparsec.Error.Dec)
                                                                    ($dShow1 :: GHC.Show.Show
                                                                                  Text.Megaparsec.Error.Dec)
                                                                    ($dShowToken :: Text.Megaparsec.Error.ShowToken
                                                                                      GHC.Types.Char)
                                                                    ($dOrd :: GHC.Classes.Ord
                                                                                GHC.Types.Char)
                                                                    ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                     GHC.Types.Char)
                                                                    ($dShow :: GHC.Show.Show
                                                                                 GHC.Types.Char)
  Text.Megaparsec.Error.$fExceptionParseError @ GHC.Types.Char
                                              @ Text.Megaparsec.Error.Dec
                                              $dShow
                                              $dTypeable
                                              $dOrd
                                              $dShowToken
                                              $dShow1
                                              $dTypeable1
                                              $dShowErrorComponent
  = Processor.$s$fExceptionParseError
"SPEC/Processor $fExceptionParseError_$cdisplayException @ Char @ Dec" [ALWAYS] forall ($dShowErrorComponent :: Text.Megaparsec.Error.ShowErrorComponent
                                                                                                                  Text.Megaparsec.Error.Dec)
                                                                                       ($dTypeable1 :: Data.Typeable.Internal.Typeable
                                                                                                         Text.Megaparsec.Error.Dec)
                                                                                       ($dShow1 :: GHC.Show.Show
                                                                                                     Text.Megaparsec.Error.Dec)
                                                                                       ($dShowToken :: Text.Megaparsec.Error.ShowToken
                                                                                                         GHC.Types.Char)
                                                                                       ($dOrd :: GHC.Classes.Ord
                                                                                                   GHC.Types.Char)
                                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                                        GHC.Types.Char)
                                                                                       ($dShow :: GHC.Show.Show
                                                                                                    GHC.Types.Char)
  Text.Megaparsec.Error.$fExceptionParseError_$cdisplayException @ GHC.Types.Char
                                                                 @ Text.Megaparsec.Error.Dec
                                                                 $dShow
                                                                 $dTypeable
                                                                 $dOrd
                                                                 $dShowToken
                                                                 $dShow1
                                                                 $dTypeable1
                                                                 $dShowErrorComponent
  = Processor.$s$fExceptionParseError_$s$fExceptionParseError_$cdisplayException
"SPEC/Processor $fExceptionParseError_$cp2Exception @ Char @ Dec" [ALWAYS] forall ($dShowErrorComponent :: Text.Megaparsec.Error.ShowErrorComponent
                                                                                                             Text.Megaparsec.Error.Dec)
                                                                                  ($dTypeable1 :: Data.Typeable.Internal.Typeable
                                                                                                    Text.Megaparsec.Error.Dec)
                                                                                  ($dShow1 :: GHC.Show.Show
                                                                                                Text.Megaparsec.Error.Dec)
                                                                                  ($dShowToken :: Text.Megaparsec.Error.ShowToken
                                                                                                    GHC.Types.Char)
                                                                                  ($dOrd :: GHC.Classes.Ord
                                                                                              GHC.Types.Char)
                                                                                  ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                                   GHC.Types.Char)
                                                                                  ($dShow :: GHC.Show.Show
                                                                                               GHC.Types.Char)
  Text.Megaparsec.Error.$fExceptionParseError_$cp2Exception @ GHC.Types.Char
                                                            @ Text.Megaparsec.Error.Dec
                                                            $dShow
                                                            $dTypeable
                                                            $dOrd
                                                            $dShowToken
                                                            $dShow1
                                                            $dTypeable1
                                                            $dShowErrorComponent
  = Processor.$s$fExceptionParseError_$s$fExceptionParseError_$cp2Exception
"SPEC/Processor $fShowParseError @ Char @ Dec" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                             GHC.Types.Char)
                                                               ($dShow :: GHC.Show.Show
                                                                            Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Error.$fShowParseError @ GHC.Types.Char
                                         @ Text.Megaparsec.Error.Dec
                                         $dShow
                                         $dShow1
  = Processor.$s$fExceptionParseError_$s$fShowParseError
"SPEC/Processor $fShowParseError_$cshow @ Char @ Dec" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                    GHC.Types.Char)
                                                                      ($dShow :: GHC.Show.Show
                                                                                   Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Error.$fShowParseError_$cshow @ GHC.Types.Char
                                                @ Text.Megaparsec.Error.Dec
                                                $dShow
                                                $dShow1
  = Processor.$s$fExceptionParseError_$s$fShowParseError_$cshow
"SPEC/Processor $fShowParseError_$cshowList @ Char @ Dec" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                        GHC.Types.Char)
                                                                          ($dShow :: GHC.Show.Show
                                                                                       Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Error.$fShowParseError_$cshowList @ GHC.Types.Char
                                                    @ Text.Megaparsec.Error.Dec
                                                    $dShow
                                                    $dShow1
  = Processor.$s$fExceptionParseError_$s$fShowParseError_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

